I"1<p>When Nick, Josh and I got together at the Newton Institute <a href="http://simpsonlab.github.io/2015/03/30/optimizing-hmm/">hackathon</a> in 2014 we wanted to see if assembling nanopore data was possible. Over the week we put together a pipeline inspired by <a href="https://github.com/PacificBiosciences/pbdagcon">pbdagcon</a> which used <a href="https://github.com/thegenemyers/DALIGNER">DALIGNER</a> and <a href="http://sourceforge.net/projects/poamsa/">poa</a> to correct sequencing errors in nanopore reads. This software, which we called <a href="https://github.com/jts/nanocorrect">nanocorrect</a>, improved the accuracy of our nanopore reads to around 97% after two rounds of correction. The corrected reads worked well in the Celera Assembler and we had very long contigs soon after the hackathon.</p>

<p>To complete our de novo assembly paper we wrote a second, much more powerful, software package called <a href="https://github.com/jts/nanopolish">nanopolish</a> that uses the nanopore signal data to improve the accuracy of the assembly. Nanopolish has since grown to support <a href="http://simpsonlab.github.io/2015/04/08/eventalign">aligning signal events to a reference genome</a> and <a href="http://simpsonlab.github.io/2016/02/03/ebola-snps/">calling SNPs</a>. Where nanocorrect was a simple, quick solution to error correction, nanopolish is a long term project that I’ve spent most of my time on in the last year.</p>

<p>Nanocorrect’s major flaw is that it is very slow (specifically the poa step which constructs a partial order alignment between sets of overlapping reads). In the year since we published our paper a few other nanopore-compatible assemblers have appeared, namely <a href="http://canu.readthedocs.org/en/latest/quick-start.html">canu</a> and <a href="http://arxiv.org/abs/1512.01801">miniasm</a>. These programs are clearly better at building contigs than our nanocorrect + CA pipeline so we’ve decided to deprecate nanocorrect. Our current suggestion is to build contigs with canu and use nanopolish to compute the final consensus sequence.</p>
:ET